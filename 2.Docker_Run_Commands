1. Let us first inspect the environment. How many containers are running on this host?

$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                           NAMES
7491823718b3   nginx:alpine   "/docker-entrypoint.â€¦"   29 seconds ago   Up 27 seconds   0.0.0.0:3456->3456/tcp, 0.0.0.0:38080->80/tcp   lucid_kapitsa

=> 1

===========================================================

2. What is the image used by the container?

=> nginx:alpine

===========================================================

3. How many ports are published on this container?

=> 2

===========================================================

4. Which of the below ports are the exposed on the CONTAINER?

=> 3456 and 80

===========================================================

5. Which of the below ports are published on Host?

=> 38080 and 3456

===========================================================

6. Run an instance of kodekloud/simple-webapp with a tag blue and map port 8080 on the container to 38282 on the host.

$ docker run -p 38282:8080 /kodekloud-simple:webapp blue
Unable to find image 'kodekloud/simple-webapp:blue' locally
blue: Pulling from kodekloud/simple-webapp
4fe2ade4980c: Already exists 
7cf6a1d62200: Already exists 
f0d690b9e495: Already exists 
fac5d45ad062: Already exists 
a6fc8a0deb7d: Pull complete 
f43c8e496f88: Pull complete 
58ca939f7651: Pull complete 
095a1a007cdb: Pull complete 
Digest: sha256:9caf15476dc60b77c7460791bea8ea5f6ca02b90199aabe088beea83bc943fe5
Status: Downloaded newer image for kodekloud/simple-webapp:blue
 * Serving Flask app "app" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)

