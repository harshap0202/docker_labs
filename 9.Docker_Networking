1. Explore the current setup and identify the number of networks that exist on this system.

$ docker network ls
NETWORK ID     NAME      DRIVER    SCOPE
e5a24fe2e676   bridge    bridge    local
e1bd4eeb89ea   host      host      local
cc017d20d8c9   none      null      local

=> 3

===========================================================

2. What is the ID associated with the bridge network?

=> e5a24fe2e676

===========================================================

3. We just ran a container named alpine-1. Identify the network it is attached to.

$ docker inspect alpine-1
[
    {
        "Id": "70cfc2cd88797ce90668c87014eac3f3172dab6152d958724951b5d7b294f0c6",
        "Created": "2024-05-14T09:48:02.347805947Z",
        "Path": "sleep",
        "Args": [
	.
	.
	.
            "NetworkMode": "host",
            "PortBindings": {},
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
       .
       .
       .
        }
    }
]

=> host

===========================================================

4. What is the subnet configured on bridge network?

$ docker inspect network bridge
[
    {
        "Name": "bridge",
        "Id": "e5a24fe2e676a3b82f62abe8900ce28335354bef84ac9780eb62816aa17ad0dd",
        "Created": "2024-05-14T09:22:39.891715123Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.12.0.0/24",
                    "Gateway": "172.12.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]
Error: No such object: network

=> 172.12.0.0/24

===========================================================

5. Run a container named alpine-2 using the alpine image and attach it to the none network.

$ docker run --name=alpine-2 --network=none alpine

===========================================================

6. Create a new network named wp-mysql-network using the bridge driver. Allocate subnet 182.18.0.1/24. Configure Gateway 182.18.0.1

$ docker network create --driver=bridge --subnet=182.18.0.1/24 --gateway=182.18.0.1 wp-mysql-network
8bbf1d5ef6c72dde61e0e9b1155841af06b0ef9cf9f5d029dffe7d83ffa3e50e

===========================================================

7. Deploy a mysql database using the mysql:5.6 image and name it mysql-db. Attach it to the newly created network wp-mysql-network
Set the database password to use db_pass123. The environment variable to set is MYSQL_ROOT_PASSWORD.

$ docker run -d --name=mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 --network=wp-mysql-network  mysql:5.6
Unable to find image 'mysql:5.6' locally
5.6: Pulling from library/mysql
35b2232c987e: Pull complete 
fc55c00e48f2: Pull complete 
0030405130e3: Pull complete 
e1fef7f6a8d1: Pull complete 
1c76272398bb: Pull complete 
f57e698171b6: Pull complete 
f5b825b269c0: Pull complete 
dcb0af686073: Pull complete 
27bbfeb886d1: Pull complete 
6f70cc868145: Pull complete 
1f6637f4600d: Pull complete 
Digest: sha256:20575ecebe6216036d25dab5903808211f1e9ba63dc7825ac20cb975e34cfcae
Status: Downloaded newer image for mysql:5.6
9078bdb158cadbe212e4383e97096ef4f273adc629a75610aca2e5298565a0cd

===========================================================

8. Deploy a web application named webapp using the kodekloud/simple-webapp-mysql image. Expose the port to 38080 on the host.
The application makes use of two environment variable:
	1: DB_Host with the value mysql-db.
	2: DB_Password with the value db_pass123.
Make sure to attach it to the newly created network called wp-mysql-network.
Also make sure to link the MySQL and the webapp container.

$ docker run -d --name=webapp -p 38080:8080 -e DB_Host=mysql-db -e DB_Password=db_pass123 --link mysql-db:mysql-db --network=wp-mysql-network  kodekloud/simple-webapp-mysql
8a51d5b2400e79344a7acc6a6e322a32c69f2f22e6da333fd058cba4ca78e8c4

===========================================================

9. If you are successfull, you should be able to view the application by clicking on the HOST:38080 at the top of your terminal. You should see a green success message.










